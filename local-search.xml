<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>用C++编写线性插值程序</title>
    <link href="/hexo-demo/2025/09/02/%E7%94%A8C-%E7%BC%96%E5%86%99%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC%E7%A8%8B%E5%BA%8F/"/>
    <url>/hexo-demo/2025/09/02/%E7%94%A8C-%E7%BC%96%E5%86%99%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>我们定义<code>LinearInterpolator</code>类并在其中实现线性插值算法，并在在另一个类的成员函数中调用线性插值函数。由于线性插值数据数组可能会很大，确实需要考虑内存管理问题。在C++中，可以利用析构函数自动释放动态分配的内存。</p><p>下面是一个示例，假设我们在<code>A1.h</code>和<code>A1.cpp</code>中实现对<code>LinearInterpolator</code>的调用。</p><h3 id="LinearInterpolator-h"><a href="#LinearInterpolator-h" class="headerlink" title="LinearInterpolator.h"></a>LinearInterpolator.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinearInterpolator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinearInterpolator</span>(<span class="hljs-type">const</span> std::string&amp; filename);<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">interpolate</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataPoint</span> &#123;<br>        <span class="hljs-type">double</span> x;<br>        <span class="hljs-type">double</span> y;<br>    &#125;;<br><br>    std::vector&lt;DataPoint&gt; data;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadData</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; filename)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="LinearInterpolator-cpp"><a href="#LinearInterpolator-cpp" class="headerlink" title="LinearInterpolator.cpp"></a>LinearInterpolator.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LinearInterpolator.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 构造函数</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;filename&quot;&gt;数据文件路径&lt;/param&gt;</span><br>LinearInterpolator::<span class="hljs-built_in">LinearInterpolator</span>(<span class="hljs-type">const</span> std::string&amp; filename) &#123;<br>    <span class="hljs-built_in">loadData</span>(filename);<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 读取数据</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;filename&quot;&gt;数据文件路径&lt;/param&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LinearInterpolator::loadData</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; filename)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建文件对象并打开文件</span><br>    <span class="hljs-function">std::ifstream <span class="hljs-title">infile</span><span class="hljs-params">(filename)</span></span>;<br>    <span class="hljs-keyword">if</span> (!infile.<span class="hljs-built_in">is_open</span>()) &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Could not open file.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 逐行读取数据</span><br>    std::string line;<br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(infile, line)) &#123;<br>        <span class="hljs-comment">// 跳过空行和注释行（以“#”开头的行）</span><br>        <span class="hljs-keyword">if</span> (line.<span class="hljs-built_in">empty</span>() || line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// 将数据写到 data 向量中</span><br>        <span class="hljs-function">std::istringstream <span class="hljs-title">iss</span><span class="hljs-params">(line)</span></span>;<br>        DataPoint dp;<br>        <span class="hljs-keyword">if</span> (iss &gt;&gt; dp.x &gt;&gt; dp.y) &#123;<br>            data.<span class="hljs-built_in">push_back</span>(dp);<br>        &#125;<br>    &#125;<br><br>    infile.<span class="hljs-built_in">close</span>();<br><br>    <span class="hljs-comment">// 保证X向量是按照从小到大的顺序排列的</span><br>    std::<span class="hljs-built_in">sort</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> DataPoint&amp; a, <span class="hljs-type">const</span> DataPoint&amp; b) &#123;<br>        <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>        &#125;);<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 线性插值</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;X值&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">LinearInterpolator::interpolate</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (data.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;No data available for interpolation.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 处理超过上限或者下限的 X 值</span><br>    <span class="hljs-keyword">if</span> (x &lt;= data.<span class="hljs-built_in">front</span>().x) <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">front</span>().y;<br>    <span class="hljs-keyword">if</span> (x &gt;= data.<span class="hljs-built_in">back</span>().x) <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">back</span>().y;<br><br>    <span class="hljs-comment">// 找到正确的区间</span><br>    <span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">lower_bound</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>(), x, [](<span class="hljs-type">const</span> DataPoint&amp; dp, <span class="hljs-type">double</span> value) &#123;<br>        <span class="hljs-keyword">return</span> dp.x &lt; value;<br>        &#125;);<br><br>    <span class="hljs-keyword">if</span> (it == data.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">back</span>().y;<br>    <span class="hljs-keyword">if</span> (it == data.<span class="hljs-built_in">begin</span>()) <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">front</span>().y;<br><br>    <span class="hljs-keyword">auto</span> it1 = it - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">auto</span> it2 = it;<br><br>    <span class="hljs-comment">// 线性插值</span><br>    <span class="hljs-type">double</span> x1 = it1-&gt;x, y1 = it1-&gt;y;<br>    <span class="hljs-type">double</span> x2 = it2-&gt;x, y2 = it2-&gt;y;<br><br>    <span class="hljs-keyword">return</span> y1 + (x - x1) * (y2 - y1) / (x2 - x1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="A1-h"><a href="#A1-h" class="headerlink" title="A1.h"></a>A1.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LinearInterpolator.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A1</span>(<span class="hljs-type">const</span> std::string&amp; filename);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someFunction</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    LinearInterpolator interpolator;<span class="hljs-comment">// 线性插值对象</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// A1_H</span></span><br></code></pre></td></tr></table></figure><h3 id="A1-cpp"><a href="#A1-cpp" class="headerlink" title="A1.cpp"></a>A1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;A1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br>A1::<span class="hljs-built_in">A1</span>(<span class="hljs-type">const</span> std::string&amp; filename) : <span class="hljs-built_in">interpolator</span>(filename) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Construct A1 &quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A1::someFunction</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">double</span> y = interpolator.<span class="hljs-built_in">interpolate</span>(x);<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Interpolated value at x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; is y = &quot;</span> &lt;&lt; y &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; ex) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Error: &quot;</span> &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 假设数据文件路径为 data.txt</span><br>        <span class="hljs-function">A1 <span class="hljs-title">a1</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br><br>        <span class="hljs-type">double</span> x;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Enter a value for x: &quot;</span>;<br>        std::cin &gt;&gt; x;<br><br>        a<span class="hljs-number">1.</span><span class="hljs-built_in">someFunction</span>(x);<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; ex) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Error: &quot;</span> &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><strong><code>LinearInterpolator</code>类</strong>：<ul><li>在<code>LinearInterpolator.h</code>和<code>LinearInterpolator.cpp</code>中定义和实现，包含数据加载和插值功能。</li><li><code>~LinearInterpolator()</code>析构函数用于在必要时释放资源（虽然<code>std::vector</code>会自动管理内存，但在这里为了示范，添加了析构函数）。</li></ul></li><li><strong><code>A1</code>类</strong>：<ul><li>在<code>A1.h</code>和<code>A1.cpp</code>中定义和实现。</li><li>包含<code>LinearInterpolator</code>的成员变量。</li><li>在<code>A1</code>的构造函数中初始化插值器。</li><li><code>someFunction</code>成员函数调用插值函数并输出结果。</li></ul></li></ol><p>通过这种方式，<code>A1</code>类整合了线性插值功能，并且可以在其成员函数中调用插值函数。在程序结束后，<code>A1</code>和<code>LinearInterpolator</code>的析构函数将自动释放内存。由于使用了<code>std::vector</code>，其内存管理是自动的，不需要手动释放数据数组的空间。</p><blockquote><p>with the help of ChatGPT</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>插值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++控制浮点数格式以及与文件交互</title>
    <link href="/hexo-demo/2025/09/02/C-%E6%8E%A7%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%BC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%B8%8E%E6%96%87%E4%BB%B6%E4%BA%A4%E4%BA%92/"/>
    <url>/hexo-demo/2025/09/02/C-%E6%8E%A7%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%BC%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%B8%8E%E6%96%87%E4%BB%B6%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h2 id="1-控制浮点数的输出格式"><a href="#1-控制浮点数的输出格式" class="headerlink" title="1. 控制浮点数的输出格式"></a>1. 控制浮点数的输出格式</h2><p>在C++中，可以使用 <code>&lt;iomanip&gt;</code> 头文件中提供的一些函数来控制浮点数的输出格式，主要包括<code>setprecision()</code>, <code>fixed</code>, <code>scientific</code> 等。</p><ul><li><code>setprecision(int n)</code>：设置浮点数的精度，即显示的总位数或小数位数。</li><li><code>fixed</code>：以固定的小数点表示法显示浮点数。</li><li><code>scientific</code>：以科学计数法表示浮点数。</li></ul><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> num = <span class="hljs-number">3.141592653589793</span>;<br>    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">2</span>) &lt;&lt; num &lt;&lt; std::endl;  <span class="hljs-comment">// 输出：3.14</span><br>    std::cout &lt;&lt; std::scientific &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">3</span>) &lt;&lt; num &lt;&lt; std::endl;  <span class="hljs-comment">// 输出：3.142e+00</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-从文本文件和CSV文件中读取数据"><a href="#2-从文本文件和CSV文件中读取数据" class="headerlink" title="2. 从文本文件和CSV文件中读取数据"></a>2. 从文本文件和CSV文件中读取数据</h2><p>读取文件通常使用 <code>&lt;fstream&gt;</code> 头文件中的 <code>ifstream</code> 类。</p><ul><li><strong>读取文本文件</strong>：可以使用 <code>ifstream</code> 来打开文件，并使用 <code>&gt;&gt;</code> 操作符或 <code>getline()</code> 函数来读取数据。</li><li><strong>读取CSV文件</strong>：因为CSV文件中的数据通常由逗号分隔，所以可以使用 <code>getline()</code> 读取整行数据，然后使用 <code>stringstream</code> 来分离每个数据项。</li></ul><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::ifstream <span class="hljs-title">file</span><span class="hljs-params">(<span class="hljs-string">&quot;data.csv&quot;</span>)</span></span>;<br>    std::string line;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(file, line)) &#123;<br>        <span class="hljs-function">std::stringstream <span class="hljs-title">ss</span><span class="hljs-params">(line)</span></span>;<br>        std::string data;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ss, data, <span class="hljs-string">&#x27;,&#x27;</span>)) &#123;<br>            std::cout &lt;&lt; data &lt;&lt; std::endl;  <span class="hljs-comment">// 输出单个数据</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-将数据输出到文件"><a href="#3-将数据输出到文件" class="headerlink" title="3. 将数据输出到文件"></a>3. 将数据输出到文件</h2><p>使用 <code>&lt;fstream&gt;</code> 头文件中的 <code>ofstream</code> 类来创建文件并写入数据。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::ofstream <span class="hljs-title">outFile</span><span class="hljs-params">(<span class="hljs-string">&quot;output.txt&quot;</span>)</span></span>;<br>    <span class="hljs-type">double</span> num = <span class="hljs-number">3.14159</span>;<br>    <span class="hljs-keyword">if</span> (outFile.<span class="hljs-built_in">is_open</span>()) &#123;<br>        outFile &lt;&lt; <span class="hljs-string">&quot;The value of pi is: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;<br>        outFile.<span class="hljs-built_in">close</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Unable to open file&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码分别展示了如何控制浮点数输出格式、如何从文本和CSV文件读取数据，以及如何将数据输出到文件中。这些基本技能在处理C++文件和数据操作时非常重要。</p><hr><h2 id="4-处理数据文件中的注释行"><a href="#4-处理数据文件中的注释行" class="headerlink" title="4. 处理数据文件中的注释行"></a>4. 处理数据文件中的注释行</h2><p>要读取一个以制表符和空格分隔的数据文件，并跳过前两行的注释，可以使用C++的标准库函数来实现。以下是一个示例函数，展示如何实现这一需求。</p><p>我们使用 <code>std::ifstream</code> 来读取文件，使用 <code>std::istringstream</code> 来分割字符串。数据将被存储到一个结构体的向量中，假设数据有两列，每列都是整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// 定义一个结构体来存储数据行</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-type">int</span> column1;<br>    <span class="hljs-type">int</span> column2;<br>&#125;;<br><br><span class="hljs-function">std::vector&lt;Data&gt; <span class="hljs-title">readData</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; filename)</span> </span>&#123;<br>    std::vector&lt;Data&gt; dataList;<br>    <span class="hljs-function">std::ifstream <span class="hljs-title">file</span><span class="hljs-params">(filename)</span></span>;<br>    std::string line;<br><br>    <span class="hljs-comment">// 跳过前两行注释</span><br>    std::<span class="hljs-built_in">getline</span>(file, line);<br>    std::<span class="hljs-built_in">getline</span>(file, line);<br><br>    <span class="hljs-comment">// 读取数据</span><br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(file, line)) &#123;<br>        <span class="hljs-function">std::istringstream <span class="hljs-title">iss</span><span class="hljs-params">(line)</span></span>;<br>        Data data;<br>        iss &gt;&gt; data.column1 &gt;&gt; data.column2;<br>        dataList.<span class="hljs-built_in">push_back</span>(data);<br>    &#125;<br><br>    file.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> dataList;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string filename = <span class="hljs-string">&quot;input.txt&quot;</span>;<br>    std::vector&lt;Data&gt; myData = <span class="hljs-built_in">readData</span>(filename);<br><br>    <span class="hljs-comment">// 打印读取的数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; data : myData) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Column 1: &quot;</span> &lt;&lt; data.column1 &lt;&lt; <span class="hljs-string">&quot;, Column 2: &quot;</span> &lt;&lt; data.column2 &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li><strong>跳过注释</strong>：使用 <code>std::getline()</code> 两次来读取并丢弃文件的前两行。</li><li><strong>数据读取和分割</strong>：之后对文件的每一行进行循环处理。每读取一行数据，就使用 <code>std::istringstream</code> 来分割这行数据。这里假设每行数据包含两个整数，它们可能由空格或制表符分开。</li><li><strong>存储数据</strong>：将分割后的数据存储到 <code>Data</code> 结构体的实例中，然后添加到 <code>std::vector&lt;Data&gt;</code> 的列表中。</li></ol><p>这个函数可以灵活调整以适应不同格式的输入和不同的数据类型。如果数据列是其他类型（如 <code>float</code> 或 <code>string</code>），你可以相应地修改 <code>Data</code> 结构体和读取数据的部分。</p><blockquote><p>with the help of ChatGPT</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>文件操作</tag>
      
      <tag>浮点数格式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Hexo 与 GitHub Pages 搭建个人博客指南</title>
    <link href="/hexo-demo/2025/09/01/%E5%88%A9%E7%94%A8-Hexo-%E4%B8%8E-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/"/>
    <url>/hexo-demo/2025/09/01/%E5%88%A9%E7%94%A8-Hexo-%E4%B8%8E-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前期准备与环境配置"><a href="#1-前期准备与环境配置" class="headerlink" title="1. 前期准备与环境配置"></a>1. 前期准备与环境配置</h2><p>开始之前，你需要准备好以下工具和账户，这是搭建博客的基础。</p><h3 id="1-1-所需工具与账户"><a href="#1-1-所需工具与账户" class="headerlink" title="1.1 所需工具与账户"></a>1.1 所需工具与账户</h3><ul><li><strong>GitHub 账户</strong>: 如果你还没有，请先去 <a href="https://github.com/">GitHub 官网</a> 注册一个。</li><li><strong>Node.js</strong>: Hexo 基于 Node.js，请从<a href="https://nodejs.org/">官网</a>下载 <strong>LTS（长期支持版本）</strong>。安装后，在终端或命令行中输入 <code>node -v</code> 和 <code>npm -v</code> 来检查是否安装成功。</li><li><strong>Git</strong>: 用于版本控制和部署。同样从<a href="https://git-scm.com/">官网</a>下载并安装。安装后，可通过 <code>git --version</code> 验证。</li></ul><h3 id="1-2-优化安装体验（可选）"><a href="#1-2-优化安装体验（可选）" class="headerlink" title="1.2 优化安装体验（可选）"></a>1.2 优化安装体验（可选）</h3><p>国内用户可以通过更换 npm 的镜像源来提升安装包的速度和稳定性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h2 id="2-安装并初始化-Hexo"><a href="#2-安装并初始化-Hexo" class="headerlink" title="2. 安装并初始化 Hexo"></a>2. 安装并初始化 Hexo</h2><p>环境准备好后，我们就可以安装并创建你的博客项目了。</p><ol><li><p><strong>安装 Hexo CLI</strong> (命令行工具):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p><strong>创建博客项目</strong>:<br>选择一个你喜欢的目录，然后执行以下命令来初始化你的博客。<code>&lt;folder&gt;</code> 替换为你想要的博客文件夹名称，例如 <code>my-blog</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure></li><li><p><strong>本地预览</strong>:<br>完成初始化后，可以立即在本地启动服务器查看默认博客的样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server <span class="hljs-comment"># 或简写为 hexo s</span><br></code></pre></td></tr></table></figure><p>在浏览器中访问 <code>http://localhost:4000</code>，你应该能看到默认的 Hexo 博客页面。</p></li></ol><h2 id="3-创建-GitHub-仓库并配置"><a href="#3-创建-GitHub-仓库并配置" class="headerlink" title="3. 创建 GitHub 仓库并配置"></a>3. 创建 GitHub 仓库并配置</h2><p>让你的博客能在互联网上访问的关键是 GitHub Pages。</p><ol><li><p><strong>创建仓库</strong>:</p><ul><li>登录 GitHub，点击右上角的 “+” -&gt; “New repository”。</li><li>选择仓库为 Public（公开）。</li><li>建议勾选 “Initialize this repository with a README”。</li></ul></li><li><p><strong>配置 SSH 密钥（推荐）</strong>:<br>使用 SSH 密钥可以与 GitHub 建立安全的连接，无需每次部署都输入密码。</p><ul><li><p><strong>生成密钥</strong>（在任意目录下打开 Git Bash 或终端执行）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><ul><li>按回车接受默认保存路径。</li><li>设置一个安全的密码（可直接回车留空，但不推荐）。</li></ul></li><li><p><strong>添加公钥到 GitHub</strong>:</p><ul><li>复制公钥内容（默认位于 <code>~/.ssh/id_ed25519.pub</code> 文件内）。</li><li>进入 GitHub Settings -&gt; SSH and GPG keys -&gt; New SSH key。</li><li>标题任意，将公钥内容粘贴到 “Key” 框中并保存。</li></ul></li></ul></li><li><p><strong>测试 SSH 连接</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>看到 “You’ve successfully authenticated” 之类的欢迎信息即表示成功。</p></li></ol><h2 id="4-配置-Hexo-部署设置"><a href="#4-配置-Hexo-部署设置" class="headerlink" title="4. 配置 Hexo 部署设置"></a>4. 配置 Hexo 部署设置</h2><p>接下来，我们需要告诉 Hexo 如何将博客部署到刚才创建的 GitHub 仓库。</p><ol><li><p><strong>安装部署插件</strong>:<br>在你的博客根目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p><strong>修改博客配置文件</strong>:<br>用文本编辑器（<strong>切勿使用 Windows 记事本</strong>，推荐 VSCode、Sublime Text、Notepad++ 等）打开博客根目录下的 <code>_config.yml</code> 文件。滚动到文件最底部，找到 <code>deploy</code> 部分，并按如下格式修改（注意每个冒号后面的<strong>空格</strong>必不可少）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 部署配置</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;你的</span> <span class="hljs-string">SSH</span> <span class="hljs-string">仓库地址&gt;</span> <span class="hljs-comment"># 替换为你的 SSH 仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 或 master，根据你的仓库默认主分支名称决定</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="搭建项目网站的注意事项"><a href="#搭建项目网站的注意事项" class="headerlink" title="搭建项目网站的注意事项"></a>搭建项目网站的注意事项</h3><p>在利用 Hexo 和 GitHub Pages 搭建个人博客时，你可以选择自定义一个仓库名称，例如 <code>hexo-demo</code>，但这会影响到你的博客访问地址。在发布后，你的博客网址是 <code>https://&lt;username&gt;.github.io/hexo-demo</code>。</p><p>此时，你需要修改 Hexo 配置文件 <code>_config.yml</code> 中的 <strong>url</strong> 和 <strong>root</strong> 参数，以确保正确的页面链接和资源加载。</p><p><strong><code>_config.yml</code> 修改示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is hosted at https://&lt;username&gt;.github.io/hexo-demo</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://&lt;username&gt;.github.io</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/hexo-demo/</span><br></code></pre></td></tr></table></figure><ul><li><strong>url</strong>: 设置为主域名 <code>https://username.github.io</code>。</li><li><strong>root</strong>: 设置为仓库名称 <code>/hexo-demo/</code>。</li></ul><h2 id="5-写作与部署"><a href="#5-写作与部署" class="headerlink" title="5. 写作与部署"></a>5. 写作与部署</h2><p>现在一切就绪，可以开始写你的第一篇博客并把它发布到网上！</p><ol><li><p><strong>创建新文章</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;我的第一篇文章&quot;</span><br></code></pre></td></tr></table></figure><p>这条命令会在 <code>source/_posts</code> 目录下生成一个 Markdown 文件（例如 <code>我的第一篇文章.md</code>），用编辑器打开它就可以开始写作了。</p><p>Markdown 文件顶部有一块 <code>Front-matter</code>，用于设置文章属性：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 我的第一篇文章<br>date: 2025-09-01 14:00:00<br>categories: [日常]<br><span class="hljs-section">tags: [Hexo, 博客]</span><br><span class="hljs-section">---</span><br><br>这里是文章的摘要部分...<br>&lt;!--more--&gt;<br>这里是文章的正文内容，你可以使用 <span class="hljs-strong">**Markdown**</span> 语法进行写作。<br></code></pre></td></tr></table></figure></li><li><p><strong>生成并部署</strong>:<br>当你写完文章后，通过以下命令将博客部署到 GitHub Pages：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo deploy -g<br></code></pre></td></tr></table></figure><ul><li><code>hexo clean</code>: 清理缓存和旧文件。</li><li><code>hexo generate</code> (<code>hexo g</code>): 生成静态网页文件。</li><li><code>hexo deploy</code> (<code>hexo d</code>): 部署到远程仓库。</li></ul><p>你也可以使用组合命令 <code>hexo g -d</code> 来一次性完成生成和部署。</p></li><li><p><strong>访问你的博客</strong>:<br>部署完成后，等待一两分钟（GitHub 需要一点时间处理），然后在浏览器中访问 <code>https://你的用户名.github.io</code>，你就能看到在线博客了！🎉</p></li></ol><h2 id="6-基本命令速查表"><a href="#6-基本命令速查表" class="headerlink" title="6. 基本命令速查表"></a>6. 基本命令速查表</h2><p>为了方便记忆，这里汇总了 Hexo 的常用命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>hexo new &quot;文章标题&quot;</code></td><td align="left">创建一篇新文章</td></tr><tr><td align="left"><code>hexo new page &quot;页面名&quot;</code></td><td align="left">创建一个新页面（如关于页）</td></tr><tr><td align="left"><code>hexo generate</code> (<code>hexo g</code>)</td><td align="left">生成静态网站文件</td></tr><tr><td align="left"><code>hexo server</code> (<code>hexo s</code>)</td><td align="left">启动本地服务器，用于预览</td></tr><tr><td align="left"><code>hexo deploy</code> (<code>hexo d</code>)</td><td align="left">部署到远程仓库（如 GitHub Pages）</td></tr><tr><td align="left"><code>hexo clean</code></td><td align="left">清除缓存文件和已生成的静态文件</td></tr></tbody></table><h2 id="7-进阶提示与常见问题"><a href="#7-进阶提示与常见问题" class="headerlink" title="7. 进阶提示与常见问题"></a>7. 进阶提示与常见问题</h2><ul><li><strong>关于主题</strong>: 默认主题可能比较简洁。你可以在<a href="https://hexo.io/themes/">Hexo 主题官网</a>探索大量第三方主题，安装通常只需 <code>git clone</code> 主题到 <code>themes</code> 目录，然后在 <code>_config.yml</code> 中修改 <code>theme</code> 字段即可。</li><li><strong>自定义域名</strong>: 如果你有自己的域名，可以在仓库根目录创建一个名为 <code>CNAME</code> 的文件（无后缀），里面写上你的域名（例如 <code>blog.yourname.com</code>），并在你的域名注册商处配置 DNS 解析即可。</li><li><strong>资源加载问题</strong>: 如果部署后发现样式、图片没加载出来，<strong>请首先检查 <code>_config.yml</code> 中的 <code>url</code> 和 <code>root</code> 设置是否正确</strong>，部署到子目录时 <code>root</code> 需要修改为 <code>/&lt;repository-name&gt;/</code>。</li><li><strong>保持更新</strong>: 建议将你的 Hexo 博客源文件（整个文件夹）也 push 到一个单独的私有 GitHub 仓库，这样既方便备份，也便于在多台设备上写作和同步。</li></ul><h3 id="更换主题的操作步骤"><a href="#更换主题的操作步骤" class="headerlink" title="更换主题的操作步骤"></a>更换主题的操作步骤</h3><p>这里以<code>fluid</code>主题为例进行说明：</p><h4 id="第一步：下载主题"><a href="#第一步：下载主题" class="headerlink" title="第一步：下载主题"></a>第一步：下载主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:fluid-dev/hexo-theme-fluid.git  <span class="hljs-comment"># 可能快一些</span><br></code></pre></td></tr></table></figure><p>这会将 Fluid 主题下载并保存到 <code>themes/fluid</code> 文件夹下。如果你想使用其他主题，只需替换命令中的 URL 和文件夹名称即可。</p><h4 id="第二步：配置主题"><a href="#第二步：配置主题" class="headerlink" title="第二步：配置主题"></a>第二步：配置主题</h4><p>下载完成后，你需要告诉 Hexo 使用这个新主题。</p><p>打开你博客根目录下的主配置文件 <code>_config.yml</code>（注意：是博客根目录的，不是主题文件夹里的）。找到 <code>theme</code> 字段，将它的值改为你新下载的主题文件夹的名称。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 将这里的 landscape 改成 fluid</span><br></code></pre></td></tr></table></figure><h4 id="第三步：部署博客"><a href="#第三步：部署博客" class="headerlink" title="第三步：部署博客"></a>第三步：部署博客</h4><p>本地测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>部署到Github Pages：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo deploy -g<br></code></pre></td></tr></table></figure><hr><p>希望这份指南能帮助你顺利搭建起自己的博客！如果遇到问题，Hexo 的官方文档和社区通常是寻找答案的好地方。享受写作和分享的乐趣吧！</p><blockquote><p>with the help of Deepseek and Gemini</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github Pages</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hexo-demo/2025/09/01/hello-world/"/>
    <url>/hexo-demo/2025/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
